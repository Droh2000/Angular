En este proyecto instalamos:
  * TailwindCSS
  * DaisyUi: Esta libreria nos expande la parte de Tailwind, poner colores primarios, secundarios, infos, success,
             manejando de manera mas comoda, pero tambien ya tiene varios componentes creados
  TailwindCSS + DaisyUi -> Solo nos crea al final un CSS con las clases que estamos utilizando en el proyecto, no se importan todas las clases de las librerias

Routas para el caso de la carpeta Country
  Sabemos que vamos a tener mas paginas en Country dentro de la carpeta Pages, pero no queremos definir todas esas rutas en el archivo de
  app.routes.ts debido a que son rutas que queremos que controle el propio modulo de Country y si estubieramos en un equipo colavorativo
  es posible que una persona estubiera toda encargada del modulo Country y asi si tubieramos muchos otros modulos modificandose al mismo tiempo
  que no queremos que nos esten tocando el mismo archivo de las rutas porque nos puede causar conflictos
    Asi que dentro del modulo Countro nos creamos el archivo de rutas, donde tenemos las rutas especificas para el modulo de country

Layout: Es un componente que usualmente es usado para darle un estilo a todas las paginas hijas, la idea es que tengamos componentes
      que lucen como paginas pero envuelven otras pantallas
  * Dentro de Country nos creamos una carpeta para eso
    Para acceder a la ruta:
      - localhost/country/by-capital

En resumen del Directorio (Dentro de Country):
  * Components: Son piezas de codigo reutilizables
  * Layouts: Estos son para identificar cuales son los que tienen un Router-Outlet
  * Pages:  Paginas donde se mostrara lo que queremos que vea el usuario
Al final todos son componentes de Angular

En esta ocacion vamos a ver una mejor forma de consumir APIs, ya que en las version mas nueva de angular tenemos objetos
relacionados con los Signal donde es mas facil en consumo de servicios Rest
  Para este caso vamos a consumir el servicio de
    - https://restcountries.com/
  Cuando consumismo el Endpoint para obtener la capital vemos que nos regresa un arreglo de todo el objeto con toda la informacion del pais, incluyendo los nombres en diferentes indiomas
  Si ponemos otra palabra que no corresponda a una capital en particular veremos que nos regresara varios objetos porque nos esta regresando todas las capitales que hacen match con esa palabra

Usamos la carpeta Services que teniamos porque nos vamos a crear un servicio
  - Esto es para tener centralizado el lugar de donde salen las peticiones HTTP para traer los datos
  Creamos el servicio con la extencion de Angular Schematics.

Por la forma en la que esta creado el API
  Si ponemos algo que no existe nos marcara un error de 404
  Si mandamos la cadena vacia nos marcara un Error
Nosotros podemos trabajar directamente con el objeto de respuesta al consumir la API pero asi estamos sujetos que si en el futuro cambian
el nombre de alguna propiedad nos dara errores,asi que nos vamos a crear un mapper y la interface respectiva
para tomar esa data y transformarla

Como el API nos lanza mensajes de errores cuando pasan ciertos esecenarios, tenemos que manejarlo
Toda la logica que implementamos aqui para manejar el error, en la version mas nueva de Angular tenemos un objeto que nos ayuda a reducir esta cantidad de codigo

Tenemos el objeto rxResource hace lo mismo que el Resource pero este nuevo si trabaja con observables

En este punto si buscamos un pais, entramos a sus detalles y nos regresamos a los resultados de busquedad perdemos toda esa informacion, ademas de esto volvemos a ejecutar otra vez todo
el proceso desde hacer la peticion hasta mostrar los datos, por cada vez que queremos volver a mostrar los datos

Vamos a hacer que si escribimos algo para buscar y luego lo borramos y volvemos a escribir lo mismo, no tiene sentido volver a hacer la peticion, asi que vamos a hacer algun Cache
