La idea es sacar de un template HTML separarlo en pequeñas piezas que serian componentes
este template lo podriamos haber sacado de internet y estar editandolo nosotros
Ademas mantendremos un File Sistem Ordenado y estructurado
  En angular antes teniamos el archivo .module.ts, eso es algo que se va a dejar de usar porque ahora
  nuestros componentes por defecto crean un StandAlone Componente (Esto quiere decir que es un componente y a la vez un modulo)

  Aqui trabajaremos con varios componentes que se mostraran en conjunto o por separado

Creamos nuestros Modulos:
  * Seria la carpeta Gifs dentro de App (Esto seria como un modulo)
    Dentro tenemos las carpetas que se relacionan directamente a este componente:
  * Las demas carpetas tembien serian los diferentes modulos

Angular Environment y Path Alias
  Estamos manipulando el Dashboard pero que tal si este menu lo queremos dejar para que lo podamos reutilizar para otro proyecto
  pero no vamos a quierer meternos al codigo fuente y ver en que parte esta tal cosa del texto o del titulo
  Lo mejor es configurar una variable de entorno para esto no creamos un objeto en el cLI
    - ng g environments
    (Esto nos crea dentro del SRC la carpeta con los dos archivos uno para produccion y otro para desarrollo)


  Para el uso de las variables de entorno y no especificar toda la ruta
    Nos creamos dentro de la carpeta tsconfig.json le colocamos un alias a la ruta que era (../../../../)
    Con "baseUrl" le indicamos que tome el ROOT como la base de las rutas que vamos a defenir, despues definimos la ruta en Path
    la primera parte es el nombre del Alias y le indicamos la ruta a donde apunta

Giphy API

  Vamos a consumir el API de esta pagina para generar GIFS y usarlos en nuestra pagina consumiendo esta API
  Empezamos agregando el Token de acceso de la API y en la misma pagina accedemos al endpoint donde podremos ver las propiedades que obtendremos al consumir el endpoint
  pero si nuestra Aplicacion solo va a requerir unas pocas propiedades del monton que hay entonces nos creamos una interface que tenga solo esos elementos para que nuestra
  Aplicacion no se vea afecta si a futuro la pagina cambia algun nombre de las propiedades, Copiando la respuesta HTTP y en la pagina de "Ctrl+Ship+P -> Parse JSON as Code" obtenemos ya la interface en TS
  para tener el Tipado de la respuesta

  Vamos a hacer que se almacene donde dejo el scroll el usuario para que cuando salga y vuelva a entrar a la pagina, se mantenga el Scroll donde
  lo dejo, para esto ocupamos la referencia a todo el elemento que contiene los Gifs, eso seria el DIV principal que tenemos en "trending-page.component.html"
  porque este sabe el tamaño del elemento

  Para lograr esto tenemos la pantalla que ve el usuario, esto se conoce como Viewpoint, supongamos que es de 600px de alto, cuando el usuario hace scroll en un elemento que pasa de los
  600px lo que sucede es que ese contenido (Que podria ser un DIV) es mas grande de lo que se puede ver y al hacer scroll se mueve hasta que esta cerca del final
  supongamos que ese DIV es de uno 1200px, ahora hay que detectar el nivel del scroll en el que nos encontramos por ejemplo saber cuanto ya hemos bajado del total del elemento
  y eso es conocido como el ScrollHeight este nos indica cual es el espacio que le hemos hecho scroll. Estas son las 3 variables que vamos a ocupar:
    * ViewPoint
    * Tamano del contenido
    * scrollHeight

  Cuando el usuario este cerca del final del scroll vamos a hacer otra peticion para traer mas gif y mostrar a continuacion de los que ya se tenian
  asi daremos la creencia de que tenemos un scroll infinito
  por la forma en que esta creado la API de Giphy, al endpoint que estamos usando le pasamos estos parametros:
    - limit: 20 (Estos son la cantidad de registros que queremos)
    - offset: 0 (En este caso queremos que salte los primeros 0 registros nos traiga 20, esto equivaldria a la primera pagina)
  Si tenemos:
    - limit: 20
    - offset: 20
      (Esto seria estar en la pagina 2 para que se salte los primeros 20 registros pero nos traiga 20 nuevos registros)
  La pagina 3 seria:
    - limit: 20
    - offset: 40
  Entonces lo que tenemos que hacer es determinar el Offset para sacar la pagina actual

  Depuracion de la aplicacion
    Para esto en el navegador debemos de tener instalada la exencion de las Angular DevTools
    ahi podremos ver el arbol de componentes, al dar click en uno de los componentes podemos ver las properties que tiene
    y analizar como estan cada uno de los objetos que tiene

    Usualmente lo que mejor vamos a querer usar son los Breackpoints
      Lo primero es color el punto rojo en la linea de codigo que queremos dentro del VS code
      Precionamos F5
      Esto nos abrira otra instancia del navegador y en el VS Code tendremos ya la aplicacion pausada y los datos de las variables

    Otra forma es disparar el Debuger del navegador, solo que ahi si tenemos que agregar el siguiente codigo en la parte donde queremos debugear
      debugger;
    Esto nos mandara a las DevTools del navegador donde podemos hacer toda la depuracion desde el navegador
